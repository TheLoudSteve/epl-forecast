name: Deploy to Production (Simple)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'infrastructure/**'

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Check if stack exists and cleanup if needed
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name epl-forecast-${{ env.ENVIRONMENT }} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_EXISTS")
        echo "Stack status: $STACK_STATUS"
        
        if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
          echo "Deleting failed stack..."
          aws cloudformation delete-stack --stack-name epl-forecast-${{ env.ENVIRONMENT }}
          aws cloudformation wait stack-delete-complete --stack-name epl-forecast-${{ env.ENVIRONMENT }}
          echo "Stack deleted successfully"
        fi
    
    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file infrastructure/step6.yaml \
          --stack-name epl-forecast-${{ env.ENVIRONMENT }} \
          --parameter-overrides \
            Environment=${{ env.ENVIRONMENT }} \
            RapidAPIKey=${{ secrets.RAPIDAPI_KEY }} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}
    
    - name: Get API endpoint and run basic tests
      run: |
        API_ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name epl-forecast-${{ env.ENVIRONMENT }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        
        echo "Production API Endpoint: $API_ENDPOINT"
        
        if [[ -n "$API_ENDPOINT" ]]; then
          # Wait for API to be ready
          echo "Waiting 60 seconds for API to initialize..."
          sleep 60
          
          # Test health endpoint
          echo "Testing /health endpoint..."
          curl -f "$API_ENDPOINT/health" || echo "Health endpoint not yet ready"
          
          echo "Production deployment completed!"
          echo "API Endpoint: $API_ENDPOINT"
        else
          echo "ERROR: Could not get API endpoint from CloudFormation output"
          exit 1
        fi