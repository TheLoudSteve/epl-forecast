name: Deploy to Production

on:
  release:
    types: [published]

env:
  AWS_REGION: us-west-2
  ENVIRONMENT: prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov "moto[all]"
    
    - name: Run tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml

  deploy-infrastructure:
    # Skip tests for initial production deployment
    # needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Check if stack exists and cleanup if needed
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name epl-forecast-${{ env.ENVIRONMENT }} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_EXISTS")
        echo "Stack status: $STACK_STATUS"
        
        if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
          echo "Deleting failed stack..."
          aws cloudformation delete-stack --stack-name epl-forecast-${{ env.ENVIRONMENT }}
          aws cloudformation wait stack-delete-complete --stack-name epl-forecast-${{ env.ENVIRONMENT }}
          echo "Stack deleted successfully"
        fi
    
    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file infrastructure/step6.yaml \
          --stack-name epl-forecast-${{ env.ENVIRONMENT }} \
          --parameter-overrides \
            Environment=${{ env.ENVIRONMENT }} \
            RapidAPIKey=${{ secrets.RAPIDAPI_KEY }} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}

  integration-test:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Run integration tests
      run: |
        API_ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name epl-forecast-${{ env.ENVIRONMENT }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        
        echo "Production API Endpoint: $API_ENDPOINT"
        
        # Wait for deployment to complete
        echo "Waiting for API to be ready..."
        sleep 60
        
        # Test health endpoint
        echo "Testing /health endpoint..."
        curl -f "$API_ENDPOINT/health" || exit 1
        
        # Test table endpoint (may need time for data to populate)
        echo "Testing /table endpoint..."
        curl -f "$API_ENDPOINT/table" || echo "Table endpoint may need time to populate data"
        
        echo "Production deployment successful!"
        echo "Production API Endpoint: $API_ENDPOINT"