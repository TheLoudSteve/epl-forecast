name: Deploy to Production

on:
  release:
    types: [published]

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov moto
    
    - name: Run tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml

  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file infrastructure/main.yaml \
          --stack-name epl-forecast-${{ env.ENVIRONMENT }} \
          --parameter-overrides \
            Environment=${{ env.ENVIRONMENT }} \
            RapidAPIKey=${{ secrets.RAPIDAPI_KEY }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --region ${{ env.AWS_REGION }}

  deploy-lambda:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Package Lambda functions
      run: |
        cd backend
        pip install -r requirements.txt -t .
        zip -r data_fetcher.zip data_fetcher.py boto3* requests* icalendar* dateutil* six* urllib3* botocore* jmespath* s3transfer* certifi* charset_normalizer* idna* pytz* recurring_ical_events*
        zip -r api_handler.zip api_handler.py boto3* botocore* jmespath* s3transfer* urllib3* certifi* dateutil* six*
    
    - name: Update Lambda functions
      run: |
        cd backend
        aws lambda update-function-code \
          --function-name epl-data-fetcher-${{ env.ENVIRONMENT }} \
          --zip-file fileb://data_fetcher.zip
        
        aws lambda update-function-code \
          --function-name epl-api-handler-${{ env.ENVIRONMENT }} \
          --zip-file fileb://api_handler.zip
    
    - name: Run integration tests
      run: |
        API_ENDPOINT=$(aws cloudformation describe-stacks \
          --stack-name epl-forecast-${{ env.ENVIRONMENT }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`APIEndpoint`].OutputValue' \
          --output text)
        
        # Test health endpoint
        curl -f "$API_ENDPOINT/health" || exit 1
        
        # Test table endpoint
        curl -f "$API_ENDPOINT/table" || exit 1
        
        echo "Production deployment successful!"
        echo "API Endpoint: $API_ENDPOINT"