name: Deploy Web to Dev

on:
  push:
    branches:
      - main
    paths:
      - 'web/**'
      - 'infrastructure/web-hosting.yaml'
      - '.github/workflows/deploy-web-dev.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ENVIRONMENT: dev

jobs:
  deploy-infrastructure:
    name: Deploy CloudFront + S3 Infrastructure (Dev)
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      bucket-name: ${{ steps.stack-outputs.outputs.bucket-name }}
      distribution-id: ${{ steps.stack-outputs.outputs.distribution-id }}
      website-url: ${{ steps.stack-outputs.outputs.website-url }}

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy CloudFormation stack
      run: |
        aws cloudformation deploy \
          --template-file infrastructure/web-hosting.yaml \
          --stack-name epl-forecast-web-dev \
          --parameter-overrides \
            Environment=dev \
            DomainName="dev.epl.loudsteve.com" \
            AlternateDomainName="" \
            CertificateArn="${{ secrets.CLOUDFRONT_CERT_ARN_DEV }}" \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --no-fail-on-empty-changeset

    - name: Get stack outputs
      id: stack-outputs
      run: |
        BUCKET_NAME=$(aws cloudformation describe-stacks \
          --stack-name epl-forecast-web-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
          --output text)

        DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
          --stack-name epl-forecast-web-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`DistributionId`].OutputValue' \
          --output text)

        WEBSITE_URL=$(aws cloudformation describe-stacks \
          --stack-name epl-forecast-web-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`WebsiteURL`].OutputValue' \
          --output text)

        echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
        echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
        echo "website-url=$WEBSITE_URL" >> $GITHUB_OUTPUT

        echo "Bucket: $BUCKET_NAME"
        echo "Distribution: $DISTRIBUTION_ID"
        echo "URL: $WEBSITE_URL"

  deploy-web-app:
    name: Deploy Web App Files (Dev)
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: dev

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Sync web files to S3
      run: |
        aws s3 sync web/ s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/ \
          --exclude "*.md" \
          --exclude ".gitignore" \
          --exclude "vercel.json" \
          --delete \
          --cache-control "public, max-age=300, s-maxage=300" \
          --region ${{ env.AWS_REGION }}

        echo "‚úÖ Web files synced to S3"

    - name: Set correct content types
      run: |
        # Set content type for HTML files
        aws s3 cp s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/index.html \
          s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/index.html \
          --content-type "text/html; charset=utf-8" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=300, s-maxage=300" \
          --region ${{ env.AWS_REGION }}

        # Set content type for CSS files (no cache for dev)
        aws s3 cp s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/styles.css \
          s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/styles.css \
          --content-type "text/css; charset=utf-8" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=0, s-maxage=0, must-revalidate" \
          --region ${{ env.AWS_REGION }}

        # Set content type for JS files (no cache for dev)
        aws s3 cp s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/app.js \
          s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/app.js \
          --content-type "application/javascript; charset=utf-8" \
          --metadata-directive REPLACE \
          --cache-control "public, max-age=0, s-maxage=0, must-revalidate" \
          --region ${{ env.AWS_REGION }}

        echo "‚úÖ Content types set correctly"

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ needs.deploy-infrastructure.outputs.distribution-id }} \
          --paths "/*" \
          --region ${{ env.AWS_REGION }}

        echo "‚úÖ CloudFront cache invalidated"

    - name: Deployment summary
      run: |
        echo "## üéâ Web App Deployment Complete (Dev)!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** dev" >> $GITHUB_STEP_SUMMARY
        echo "**S3 Bucket:** ${{ needs.deploy-infrastructure.outputs.bucket-name }}" >> $GITHUB_STEP_SUMMARY
        echo "**CloudFront Distribution:** ${{ needs.deploy-infrastructure.outputs.distribution-id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Website URL:** ${{ needs.deploy-infrastructure.outputs.website-url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The web app is now live at:" >> $GITHUB_STEP_SUMMARY
        echo "üîó [${{ needs.deploy-infrastructure.outputs.website-url }}](${{ needs.deploy-infrastructure.outputs.website-url }})" >> $GITHUB_STEP_SUMMARY

        echo ""
        echo "================================================"
        echo "‚úÖ Dev deployment successful!"
        echo "üåê Website URL: ${{ needs.deploy-infrastructure.outputs.website-url }}"
        echo "================================================"
