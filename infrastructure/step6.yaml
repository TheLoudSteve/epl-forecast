AWSTemplateFormatVersion: '2010-09-09'
Description: 'EPL Forecast - Step 6: Lambda Functions + API Gateway'

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, prod]
    Description: Environment name
  RapidAPIKey:
    Type: String
    NoEcho: true
    Description: RapidAPI key for football data
  NewRelicAccountId:
    Type: String
    Description: New Relic account ID for Lambda monitoring
    Default: ""
  NewRelicLicenseKey:
    Type: String
    NoEcho: true
    Description: New Relic license key for Lambda monitoring
    Default: ""
  APNSPlatformApplicationArn:
    Type: String
    Description: ARN of the pre-created APNS platform application (optional)
    Default: ""

Conditions:
  IsProduction: !Equals [!Ref Environment, 'prod']
  EnableNewRelic: !Not [!Equals [!Ref NewRelicAccountId, ""]]
  EnableAPNS: !Not [!Equals [!Ref APNSPlatformApplicationArn, ""]]
  
Resources:
  # DynamoDB table for caching EPL data
  EPLDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'epl-data-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # DynamoDB table for user notification preferences
  UserPreferencesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'epl-user-preferences-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # DynamoDB table for historical forecast snapshots
  ForecastHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'epl-forecast-history-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: snapshot_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: snapshot_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # DynamoDB table for schedule manager (match schedule cache)
  ScheduleManagerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'epl-match-schedule-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: schedule_id
          AttributeType: S
        - AttributeName: match_date
          AttributeType: S
      KeySchema:
        - AttributeName: schedule_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: MatchDateIndex
          KeySchema:
            - AttributeName: match_date
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # S3 bucket for ICS feed cache
  ICSCacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # SNS Topic for push notifications
  PushNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'epl-forecast-notifications-${Environment}'
      DisplayName: !Sub 'EPL Forecast Notifications (${Environment})'

  # Note: APNS Platform Application created manually due to CloudFormation limitation in us-west-2
  # The ARN is passed via APNSPlatformApplicationArn parameter

  # IAM role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:CreatePlatformEndpoint
                  - sns:DeleteEndpoint
                  - sns:GetEndpointAttributes
                  - sns:SetEndpointAttributes
                  - sns:ListEndpointsByPlatformApplication
                Resource: 
                  - !Ref PushNotificationTopic
                  - !If 
                    - EnableAPNS
                    - !Ref APNSPlatformApplicationArn
                    - !Ref 'AWS::NoValue'
                  - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:endpoint/APNS*/*'
        - PolicyName: EventBridgeManagementPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                  - events:ListRules
                  - events:DescribeRule
                  - events:ListTargetsByRule
                Resource:
                  - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/epl-match-*'
                  - !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/epl-dynamic-match-*'

  # IAM role for New Relic AWS integration (API polling)
  NewRelicInfrastructureRole:
    Type: AWS::IAM::Role
    Condition: EnableNewRelic
    Properties:
      RoleName: !Sub 'NewRelicInfrastructure-Integrations-${Environment}-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::754728514883:root
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref NewRelicAccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: NewRelicAPIGatewayPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:GET
                  - apigateway:HEAD
                  - apigateway:OPTIONS
                  - tag:GetResources
                Resource: '*'

  # SNS Platform Application for APNS (iOS push notifications)
  # TODO: Re-enable when we have APNS certificates configured
  # APNSPlatformApplication:
  #   Type: AWS::SNS::PlatformApplication
  #   Condition: EnableAPNS
  #   Properties:
  #     Name: !Sub 'EPLForecast-APNS-${Environment}'
  #     Platform: APNS
  #     Attributes:
  #       PlatformCredential: !Ref APNSCertificateArn

  # SNS Topic for push notifications
  PushNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'epl-forecast-notifications-${Environment}'
      DisplayName: 'EPL Forecast Notifications'


  # Scheduled data fetcher Lambda function (2x daily)
  ScheduledDataFetcherFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'epl-scheduled-fetcher-${Environment}'
      Runtime: python3.11
      Handler: scheduled_data_fetcher.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Layers: !If 
        - EnableNewRelic
        - - !Sub 'arn:aws:lambda:${AWS::Region}:451483290750:layer:NewRelicPython311:2'
        - !Ref 'AWS::NoValue'
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Scheduled fetcher placeholder')}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE: !Ref EPLDataTable
          USER_PREFERENCES_TABLE: !Ref UserPreferencesTable
          FORECAST_HISTORY_TABLE: !Ref ForecastHistoryTable
          RAPIDAPI_KEY: !Ref RapidAPIKey
          SNS_TOPIC_ARN: !Ref PushNotificationTopic
          APNS_PLATFORM_ARN: !If 
            - EnableAPNS 
            - !Ref APNSPlatformApplicationArn
            - !Ref 'AWS::NoValue'
          NEW_RELIC_ACCOUNT_ID: !If [EnableNewRelic, !Ref NewRelicAccountId, !Ref 'AWS::NoValue']
          NEW_RELIC_LICENSE_KEY: !If [EnableNewRelic, !Ref NewRelicLicenseKey, !Ref 'AWS::NoValue']
          NEW_RELIC_APP_NAME: !If [EnableNewRelic, !Sub 'EPL-Forecast-ScheduledFetcher-${Environment}', !Ref 'AWS::NoValue']

  # Live match fetcher Lambda function (every 2 minutes in prod only)
  LiveMatchFetcherFunction:
    Type: AWS::Lambda::Function
    Condition: IsProduction
    Properties:
      FunctionName: !Sub 'epl-live-fetcher-${Environment}'
      Runtime: python3.11
      Handler: live_match_fetcher.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 256
      Layers: !If 
        - EnableNewRelic
        - - !Sub 'arn:aws:lambda:${AWS::Region}:451483290750:layer:NewRelicPython311:2'
        - !Ref 'AWS::NoValue'
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Live match fetcher placeholder')}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE: !Ref EPLDataTable
          USER_PREFERENCES_TABLE: !Ref UserPreferencesTable
          FORECAST_HISTORY_TABLE: !Ref ForecastHistoryTable
          S3_BUCKET: !Ref ICSCacheBucket
          RAPIDAPI_KEY: !Ref RapidAPIKey
          SNS_TOPIC_ARN: !Ref PushNotificationTopic
          APNS_PLATFORM_ARN: !If 
            - EnableAPNS 
            - !Ref APNSPlatformApplicationArn
            - !Ref 'AWS::NoValue'
          NEW_RELIC_ACCOUNT_ID: !If [EnableNewRelic, !Ref NewRelicAccountId, !Ref 'AWS::NoValue']
          NEW_RELIC_LICENSE_KEY: !If [EnableNewRelic, !Ref NewRelicLicenseKey, !Ref 'AWS::NoValue']
          NEW_RELIC_APP_NAME: !If [EnableNewRelic, !Sub 'EPL-Forecast-LiveFetcher-${Environment}', !Ref 'AWS::NoValue']

  # Schedule Manager Lambda function (daily ICS parsing and EventBridge rule management)
  ScheduleManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'epl-schedule-manager-${Environment}'
      Runtime: python3.11
      Handler: schedule_manager.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Layers: !If
        - EnableNewRelic
        - - !Sub 'arn:aws:lambda:${AWS::Region}:451483290750:layer:NewRelicPython311:2'
        - !Ref 'AWS::NoValue'
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Schedule manager placeholder')}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SCHEDULE_TABLE: !Ref ScheduleManagerTable
          S3_BUCKET: !Ref ICSCacheBucket
          NEW_RELIC_ACCOUNT_ID: !If [EnableNewRelic, !Ref NewRelicAccountId, !Ref 'AWS::NoValue']
          NEW_RELIC_LICENSE_KEY: !If [EnableNewRelic, !Ref NewRelicLicenseKey, !Ref 'AWS::NoValue']
          NEW_RELIC_APP_NAME: !If [EnableNewRelic, !Sub 'EPL-Forecast-ScheduleManager-${Environment}', !Ref 'AWS::NoValue']

  # API handler Lambda function
  APIHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'epl-api-handler-${Environment}'
      Runtime: python3.11
      Handler: api_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('API handler placeholder')}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE: !Ref EPLDataTable
          USER_PREFERENCES_TABLE: !Ref UserPreferencesTable
          FORECAST_HISTORY_TABLE: !Ref ForecastHistoryTable
          SNS_TOPIC_ARN: !Ref PushNotificationTopic
          APNS_PLATFORM_ARN: !If 
            - EnableAPNS 
            - !Ref APNSPlatformApplicationArn
            - !Ref 'AWS::NoValue'
          NEW_RELIC_ACCOUNT_ID: !If [EnableNewRelic, !Ref NewRelicAccountId, !Ref 'AWS::NoValue']
          NEW_RELIC_LICENSE_KEY: !If [EnableNewRelic, !Ref NewRelicLicenseKey, !Ref 'AWS::NoValue']
          NEW_RELIC_APP_NAME: !If [EnableNewRelic, !Sub 'EPL-Forecast-APIHandler-${Environment}', !Ref 'AWS::NoValue']

  # API Gateway
  EPLForecastAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'epl-forecast-api-${Environment}'
      Description: EPL Forecast API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Health endpoint resource
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !GetAtt EPLForecastAPI.RootResourceId
      PathPart: health

  # Health endpoint method
  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Table endpoint resource
  TableResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !GetAtt EPLForecastAPI.RootResourceId
      PathPart: table

  # Table endpoint method
  TableMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref TableResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Lambda permissions for API Gateway
  APIHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref APIHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EPLForecastAPI}/*/*/*'

  # Debug endpoint resource
  DebugResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !GetAtt EPLForecastAPI.RootResourceId
      PathPart: debug

  # Debug endpoint method
  DebugMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref DebugResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Preferences endpoint resource
  PreferencesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !GetAtt EPLForecastAPI.RootResourceId
      PathPart: preferences

  # Preferences GET method
  PreferencesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref PreferencesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Preferences POST method
  PreferencesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref PreferencesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Preferences PUT method
  PreferencesPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref PreferencesResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Preferences OPTIONS method for CORS
  PreferencesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref PreferencesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-User-ID'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Preferences register sub-resource
  PreferencesRegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !Ref PreferencesResource
      PathPart: register

  # Preferences register POST method
  PreferencesRegisterPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref PreferencesRegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Preferences test sub-resource
  PreferencesTestResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !Ref PreferencesResource
      PathPart: test

  # Preferences test POST method
  PreferencesTestPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref PreferencesTestResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Preferences preview sub-resource
  PreferencesPreviewResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !Ref PreferencesResource
      PathPart: preview

  # Preferences preview GET method
  PreferencesPreviewGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref PreferencesPreviewResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Preferences stats sub-resource
  PreferencesStatsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !Ref PreferencesResource
      PathPart: stats

  # Preferences stats GET method
  PreferencesStatsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref PreferencesStatsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # API Gateway deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - HealthMethod
      - TableMethod
      - DebugMethod
      - PreferencesGetMethod
      - PreferencesPostMethod
      - PreferencesPutMethod
      - PreferencesOptionsMethod
      - PreferencesRegisterPostMethod
      - PreferencesTestPostMethod
      - PreferencesPreviewGetMethod
      - PreferencesStatsGetMethod
    Properties:
      RestApiId: !Ref EPLForecastAPI
      StageName: !Ref Environment

  # EventBridge rule for scheduled data fetcher (2x daily at 00:00 and 12:00 UTC)
  ScheduledDataFetcherRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'epl-scheduled-fetcher-${Environment}'
      Description: 'Trigger EPL scheduled data fetcher at 00:00 and 12:00 UTC'
      ScheduleExpression: 'cron(0 0,12 * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScheduledDataFetcherFunction.Arn
          Id: 'ScheduledDataFetcherTarget'

  # Permission for EventBridge to invoke the scheduled Lambda function
  ScheduledDataFetcherPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScheduledDataFetcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledDataFetcherRule.Arn

  # EventBridge rule for Schedule Manager (daily at 06:00 UTC)
  ScheduleManagerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'epl-schedule-manager-${Environment}'
      Description: 'Trigger Schedule Manager daily to create dynamic match rules'
      ScheduleExpression: 'cron(0 6 * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScheduleManagerFunction.Arn
          Id: 'ScheduleManagerTarget'

  # Permission for EventBridge to invoke the Schedule Manager function
  ScheduleManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScheduleManagerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleManagerRule.Arn

  # EventBridge rule for live match fetcher - DISABLED for cost optimization
  # Schedule Manager creates dynamic rules only when matches are detected
  LiveMatchFetcherRule:
    Type: AWS::Events::Rule
    Condition: IsProduction
    Properties:
      Name: !Sub 'epl-live-fetcher-${Environment}'
      Description: 'Legacy live match fetcher rule - DISABLED for cost optimization. Schedule Manager creates dynamic rules instead.'
      ScheduleExpression: 'rate(2 minutes)'
      State: DISABLED
      Targets:
        - Arn: !GetAtt LiveMatchFetcherFunction.Arn
          Id: 'LiveMatchFetcherTarget'

  # Permission for EventBridge to invoke the live match Lambda function
  LiveMatchFetcherPermission:
    Type: AWS::Lambda::Permission
    Condition: IsProduction
    Properties:
      FunctionName: !Ref LiveMatchFetcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LiveMatchFetcherRule.Arn

Outputs:
  DynamoDBTable:
    Description: DynamoDB table name
    Value: !Ref EPLDataTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'

  UserPreferencesTable:
    Description: User preferences DynamoDB table name
    Value: !Ref UserPreferencesTable
    Export:
      Name: !Sub '${AWS::StackName}-UserPreferencesTable'

  ForecastHistoryTable:
    Description: Forecast history DynamoDB table name
    Value: !Ref ForecastHistoryTable
    Export:
      Name: !Sub '${AWS::StackName}-ForecastHistoryTable'

  ScheduleManagerTable:
    Description: Schedule manager DynamoDB table name
    Value: !Ref ScheduleManagerTable
    Export:
      Name: !Sub '${AWS::StackName}-ScheduleManagerTable'

  PushNotificationTopic:
    Description: SNS topic for push notifications
    Value: !Ref PushNotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-PushNotificationTopic'

  APNSPlatformApplication:
    Condition: EnableAPNS
    Description: APNS platform application for iOS push notifications (manually created)
    Value: !Ref APNSPlatformApplicationArn
    Export:
      Name: !Sub '${AWS::StackName}-APNSPlatformApplication'
  
  S3Bucket:
    Description: S3 bucket for ICS cache
    Value: !Ref ICSCacheBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'
      
  LambdaRole:
    Description: Lambda execution role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRole'

  ScheduledDataFetcherFunction:
    Description: Scheduled data fetcher Lambda function name
    Value: !Ref ScheduledDataFetcherFunction
    Export:
      Name: !Sub '${AWS::StackName}-ScheduledDataFetcherFunction'

  ScheduleManagerFunction:
    Description: Schedule manager Lambda function name
    Value: !Ref ScheduleManagerFunction
    Export:
      Name: !Sub '${AWS::StackName}-ScheduleManagerFunction'

  LiveMatchFetcherFunction:
    Condition: IsProduction
    Description: Live match fetcher Lambda function name
    Value: !Ref LiveMatchFetcherFunction
    Export:
      Name: !Sub '${AWS::StackName}-LiveMatchFetcherFunction'

  APIHandlerFunction:
    Description: API handler Lambda function name
    Value: !Ref APIHandlerFunction
    Export:
      Name: !Sub '${AWS::StackName}-APIHandlerFunction'

  APIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${EPLForecastAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'

  NewRelicRoleArn:
    Condition: EnableNewRelic
    Description: New Relic Infrastructure Role ARN for API polling integration  
    Value: !GetAtt NewRelicInfrastructureRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-NewRelicRoleArn'