AWSTemplateFormatVersion: '2010-09-09'
Description: 'EPL Forecast - Step 6: Lambda Functions + API Gateway'

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, prod]
    Description: Environment name
  RapidAPIKey:
    Type: String
    NoEcho: true
    Description: RapidAPI key for football data
  NewRelicAccountId:
    Type: String
    Description: New Relic account ID for Lambda monitoring
    Default: ""
  NewRelicLicenseKey:
    Type: String
    NoEcho: true
    Description: New Relic license key for Lambda monitoring
    Default: ""
  NewRelicIngestKey:
    Type: String
    NoEcho: true
    Description: New Relic ingest license key for CloudWatch Metric Streams
    Default: ""

Conditions:
  IsProduction: !Equals [!Ref Environment, 'prod']
  EnableNewRelic: !Not [!Equals [!Ref NewRelicAccountId, ""]]
  EnableMetricStreams: !Equals [!Ref Environment, "disable-for-now"]
  
Resources:
  # DynamoDB table for caching EPL data
  EPLDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'epl-data-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # S3 bucket for ICS feed cache
  ICSCacheBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # IAM role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # IAM role for New Relic AWS integration (API polling)
  NewRelicInfrastructureRole:
    Type: AWS::IAM::Role
    Condition: EnableNewRelic
    Properties:
      RoleName: !Sub 'NewRelicInfrastructure-Integrations-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::754728514883:root
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref NewRelicAccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: NewRelicAPIGatewayPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:GET
                  - apigateway:HEAD
                  - apigateway:OPTIONS
                  - tag:GetResources
                Resource: '*'

  # Scheduled data fetcher Lambda function (2x daily)
  ScheduledDataFetcherFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'epl-scheduled-fetcher-${Environment}'
      Runtime: python3.11
      Handler: scheduled_data_fetcher.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Scheduled fetcher placeholder')}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE: !Ref EPLDataTable
          RAPIDAPI_KEY: !Ref RapidAPIKey
          NEW_RELIC_ACCOUNT_ID: !If [EnableNewRelic, !Ref NewRelicAccountId, !Ref 'AWS::NoValue']
          NEW_RELIC_LICENSE_KEY: !If [EnableNewRelic, !Ref NewRelicLicenseKey, !Ref 'AWS::NoValue']
          NEW_RELIC_LAMBDA_HANDLER: !If [EnableNewRelic, 'scheduled_data_fetcher.lambda_handler', !Ref 'AWS::NoValue']
          NEW_RELIC_LAMBDA_EXTENSION_ENABLED: !If [EnableNewRelic, 'true', !Ref 'AWS::NoValue']

  # Live match fetcher Lambda function (every 2 minutes in prod only)
  LiveMatchFetcherFunction:
    Type: AWS::Lambda::Function
    Condition: IsProduction
    Properties:
      FunctionName: !Sub 'epl-live-fetcher-${Environment}'
      Runtime: python3.11
      Handler: live_match_fetcher.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Live match fetcher placeholder')}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE: !Ref EPLDataTable
          S3_BUCKET: !Ref ICSCacheBucket
          RAPIDAPI_KEY: !Ref RapidAPIKey
          NEW_RELIC_ACCOUNT_ID: !If [EnableNewRelic, !Ref NewRelicAccountId, !Ref 'AWS::NoValue']
          NEW_RELIC_LICENSE_KEY: !If [EnableNewRelic, !Ref NewRelicLicenseKey, !Ref 'AWS::NoValue']
          NEW_RELIC_LAMBDA_HANDLER: !If [EnableNewRelic, 'live_match_fetcher.lambda_handler', !Ref 'AWS::NoValue']
          NEW_RELIC_LAMBDA_EXTENSION_ENABLED: !If [EnableNewRelic, 'true', !Ref 'AWS::NoValue']

  # API handler Lambda function
  APIHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'epl-api-handler-${Environment}'
      Runtime: python3.11
      Handler: api_handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('API handler placeholder')}
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DYNAMODB_TABLE: !Ref EPLDataTable
          NEW_RELIC_ACCOUNT_ID: !If [EnableNewRelic, !Ref NewRelicAccountId, !Ref 'AWS::NoValue']
          NEW_RELIC_LICENSE_KEY: !If [EnableNewRelic, !Ref NewRelicLicenseKey, !Ref 'AWS::NoValue']
          NEW_RELIC_LAMBDA_HANDLER: !If [EnableNewRelic, 'api_handler.lambda_handler', !Ref 'AWS::NoValue']
          NEW_RELIC_LAMBDA_EXTENSION_ENABLED: !If [EnableNewRelic, 'true', !Ref 'AWS::NoValue']

  # API Gateway
  EPLForecastAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'epl-forecast-api-${Environment}'
      Description: EPL Forecast API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Health endpoint resource
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !GetAtt EPLForecastAPI.RootResourceId
      PathPart: health

  # Health endpoint method
  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Table endpoint resource
  TableResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !GetAtt EPLForecastAPI.RootResourceId
      PathPart: table

  # Table endpoint method
  TableMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref TableResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # Lambda permissions for API Gateway
  APIHandlerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref APIHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EPLForecastAPI}/*/*/*'

  # Debug endpoint resource
  DebugResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ParentId: !GetAtt EPLForecastAPI.RootResourceId
      PathPart: debug

  # Debug endpoint method
  DebugMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EPLForecastAPI
      ResourceId: !Ref DebugResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'

  # API Gateway deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - HealthMethod
      - TableMethod
      - DebugMethod
    Properties:
      RestApiId: !Ref EPLForecastAPI
      StageName: !Ref Environment

  # EventBridge rule for scheduled data fetcher (2x daily at 00:00 and 12:00 UTC)
  ScheduledDataFetcherRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'epl-scheduled-fetcher-${Environment}'
      Description: 'Trigger EPL scheduled data fetcher at 00:00 and 12:00 UTC'
      ScheduleExpression: 'cron(0 0,12 * * ? *)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScheduledDataFetcherFunction.Arn
          Id: 'ScheduledDataFetcherTarget'

  # Permission for EventBridge to invoke the scheduled Lambda function
  ScheduledDataFetcherPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ScheduledDataFetcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledDataFetcherRule.Arn

  # EventBridge rule for live match fetcher (every 2 minutes, production only)
  LiveMatchFetcherRule:
    Type: AWS::Events::Rule
    Condition: IsProduction
    Properties:
      Name: !Sub 'epl-live-fetcher-${Environment}'
      Description: 'Trigger EPL live match fetcher every 2 minutes in production'
      ScheduleExpression: 'rate(2 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt LiveMatchFetcherFunction.Arn
          Id: 'LiveMatchFetcherTarget'

  # Permission for EventBridge to invoke the live match Lambda function
  LiveMatchFetcherPermission:
    Type: AWS::Lambda::Permission
    Condition: IsProduction
    Properties:
      FunctionName: !Ref LiveMatchFetcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LiveMatchFetcherRule.Arn

  # New Relic CloudWatch Metric Streams Integration
  NewRelicMetricStreamRole:
    Type: AWS::IAM::Role
    Condition: EnableMetricStreams
    Properties:
      RoleName: !Sub 'NewRelicMetricStreamRole-${Environment}-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: streams.metrics.cloudwatch.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchMetricStreamsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource: !GetAtt NewRelicFirehoseDeliveryStream.Arn

  NewRelicFirehoseRole:
    Type: AWS::IAM::Role
    Condition: EnableMetricStreams
    Properties:
      RoleName: !Sub 'NewRelicFirehoseRole-${Environment}-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NewRelicFirehosePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource: !GetAtt NewRelicBackupBucket.Arn
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetObject
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource: !Sub '${NewRelicBackupBucket.Arn}/*'

  NewRelicBackupBucket:
    Type: AWS::S3::Bucket
    Condition: EnableMetricStreams
    Properties:
      BucketName: !Sub 'newrelic-backup-${Environment}-${AWS::AccountId}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldBackups
            Status: Enabled
            ExpirationInDays: 7

  NewRelicFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: EnableMetricStreams
    Properties:
      DeliveryStreamName: !Sub 'NewRelic-MetricStream-${Environment}'
      DeliveryStreamType: DirectPut
      HttpEndpointDestinationConfiguration:
        EndpointConfiguration:
          Url: https://aws-api.newrelic.com/cloudwatch-metrics/v1
        RequestConfiguration:
          ContentEncoding: GZIP
          CommonAttributes:
            - AttributeName: 'apikey'
              AttributeValue: !Ref NewRelicIngestKey
            - AttributeName: 'account.id'
              AttributeValue: !Ref NewRelicAccountId
        BufferingHints:
          SizeInMBs: 1
          IntervalInSeconds: 60
        RoleARN: !GetAtt NewRelicFirehoseRole.Arn
        ProcessingConfiguration:
          Enabled: false
        S3BackupMode: FailedDataOnly
        S3Configuration:
          RoleARN: !GetAtt NewRelicFirehoseRole.Arn
          BucketARN: !GetAtt NewRelicBackupBucket.Arn
          CompressionFormat: GZIP
          BufferingHints:
            SizeInMBs: 5
            IntervalInSeconds: 300

  NewRelicMetricStream:
    Type: AWS::CloudWatch::MetricStream  
    Condition: EnableMetricStreams
    Properties:
      Name: 'NR-AWS-MetricStreams'
      FirehoseArn: !GetAtt NewRelicFirehoseDeliveryStream.Arn
      RoleArn: !GetAtt NewRelicMetricStreamRole.Arn
      OutputFormat: opentelemetry0.7
      IncludeFilters:
        - Namespace: AWS/ApiGateway
        - Namespace: AWS/Lambda
        - Namespace: AWS/DynamoDB
        - Namespace: AWS/S3
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: EPLForecast

Outputs:
  DynamoDBTable:
    Description: DynamoDB table name
    Value: !Ref EPLDataTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'
  
  S3Bucket:
    Description: S3 bucket for ICS cache
    Value: !Ref ICSCacheBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'
      
  LambdaRole:
    Description: Lambda execution role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRole'

  ScheduledDataFetcherFunction:
    Description: Scheduled data fetcher Lambda function name
    Value: !Ref ScheduledDataFetcherFunction
    Export:
      Name: !Sub '${AWS::StackName}-ScheduledDataFetcherFunction'

  LiveMatchFetcherFunction:
    Condition: IsProduction
    Description: Live match fetcher Lambda function name
    Value: !Ref LiveMatchFetcherFunction
    Export:
      Name: !Sub '${AWS::StackName}-LiveMatchFetcherFunction'

  APIHandlerFunction:
    Description: API handler Lambda function name
    Value: !Ref APIHandlerFunction
    Export:
      Name: !Sub '${AWS::StackName}-APIHandlerFunction'

  APIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${EPLForecastAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'

  NewRelicRoleArn:
    Condition: EnableNewRelic
    Description: New Relic Infrastructure Role ARN for API polling integration  
    Value: !GetAtt NewRelicInfrastructureRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-NewRelicRoleArn'